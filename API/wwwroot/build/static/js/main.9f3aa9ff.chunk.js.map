{"version":3,"sources":["app/api/agent.ts","app/stores/ticketStore.ts","app/stores/userStore.ts","app/stores/store.ts","app/stores/commonStore.ts","app/stores/modalStore.ts","app/stores/contactStore.ts","app/stores/commentStore.ts","app/stores/progressStore.ts","features/tickets/dashboard/TicketComments.tsx","features/tickets/dashboard/WatchList.tsx","features/tickets/dashboard/TicketItem.tsx","features/tickets/dashboard/TicketFilter.tsx","features/tickets/dashboard/TicketDashboard.tsx","app/common/form/MyTextInput.tsx","features/users/LoginForm.tsx","app/layout/NavBar.tsx","features/assets/OG_Cub3Ski_img.png","features/assets/CCSC_img.png","features/home/Slide.tsx","features/home/Portfolio.tsx","app/common/form/MyTextArea.tsx","features/home/QuoteForm.tsx","features/home/SlideShow.tsx","features/assets/website.jpg","features/assets/client.jpg","features/home/HomePage.tsx","app/layout/Footer.tsx","features/payments/TransactionItem.tsx","features/payments/TransactionHistory.tsx","features/users/ProgressFeed.tsx","features/tickets/TicketForm.tsx","features/users/ProgressNoteItem.tsx","features/users/ProgressNotes.tsx","features/users/WebsiteItem.tsx","features/users/Profile.tsx","app/common/modals/ModalContainer.tsx","features/pages/FAQ.tsx","features/pages/Contact.tsx","features/users/clientManager/WebsiteForm.tsx","features/users/clientManager/ClientItem.tsx","features/users/clientManager/ClientManager.tsx","features/errors/NotFound.tsx","app/layout/App.tsx","reportWebVitals.ts","index.tsx"],"names":["axios","defaults","baseURL","process","responseBody","response","data","interceptors","request","use","config","token","store","commonStore","headers","Authorization","error","status","errors","modalStateErrors","key","push","flat","toast","requests","url","get","then","body","post","put","delete","agent","Tickets","list","params","details","id","update","ticket","create","updateWatchers","Account","current","currentRole","getTransactions","username","createWebsite","website","login","user","register","allClients","deleteUser","Contact","send","email","TicketStore","tickets","ticketRegistry","Map","predicate","set","setTickets","forEach","console","log","date","split","setPredicate","value","resetPredicate","loadTickets","a","axiosParams","createTicket","deleteTicket","runInAction","editTicket","field","ticketId","result","users","findIndex","watcher","isWatching","displayName","isAssignedTo","isOwner","makeAutoObservable","this","reaction","keys","clear","URLSearchParams","append","toISOString","UserStore","clientManager","transactionHistory","creds","setToken","history","modalStore","closeModal","logout","window","localStorage","removeItem","newUser","getClients","getUser","role","clients","setClients","client","setTransactions","ticketStore","userStore","getItem","appLoaded","setServerError","setAppLoaded","setItem","modal","open","openModal","content","contactStore","sendContactEmail","commentStore","ticketComments","hubConnection","createHubConnection","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","catch","on","commentsDto","comments","comment","createAt","Date","commentDto","stopHubConnection","stop","clearComments","addComment","values","invoke","progressStore","progressRegistry","websiteId","noteDto","notes","note","addNote","StoreContext","createContext","useStore","useContext","observer","useEffect","Segment","clearing","Comment","Group","onSubmit","resetForm","initialValues","validationSchema","Yup","required","isValid","handleSubmit","className","name","props","style","position","placeholder","rows","onKeyPress","e","shiftKey","preventDefault","Content","Author","as","Metadata","formatDistanceToNow","Text","whiteSpace","Actions","Action","getComments","map","Label","color","Button","compact","onClick","Icon","fitted","priorityOptions","text","label","empty","circular","statusOptions","useState","showComments","setShowComments","handleChange","handleShowComments","prevVal","Item","Header","Dropdown","defaultValue","options","onChange","priority","subject","Meta","site","Description","Divider","horizontal","description","positive","negative","floated","Menu","vertical","size","width","marginTop","icon","attached","active","has","Grid","GridColumn","ticket_items","returnTickets","MyTextInput","useField","meta","Form","Field","touched","basic","password","setErrors","isSubmitting","autoComplete","Image","src","type","render","marginBottom","fluid","borderless","fixed","NavLink","to","exact","isLoggedIn","displayProfile","includes","displaySuperAdmin","Link","Slide","Card","href","height","image","header","_slides","cub3ski_img","CCSC_img","translateFactor","length","slideKey","createSlide","index","ACTIONS","reducer","slides","action","ind","splice","m","Portfolio","setIndex","useReducer","i","portSlides","dispatch","direction","setDirection","transitionEnabled","setTransitionEnabled","timeoutRef","useRef","resetTimeout","clearTimeout","resetTransition","setTimeout","prevDir","backgroundColor","transform","transition","onTransitionEnd","prevIndex","prevDirection","MyTextArea","QuoteForm","fromEmail","images","SlideShow","React","backgroundImage","backgroundSize","backgroundRepeat","backgroundPosition","_","idx","HomePage","stackable","centered","columns","Column","raised","Row","rounded","Footer","TransactionItem","transaction","Table","Cell","amount","service","transactiontype","createTime","dueTime","total","setTotal","HeaderCell","Body","transactionItems","total_amount","prevTotal","undefined","find","u","filterTickets","TicketForm","curDate","newTicket","uuid","ticketSubmit","progressNotes","author","progressAmount","getNotes","showNotes","setShowNotes","Progress","percent","progress","websites","displayWebsites","Modal","onClose","FAQ","activeIndex","setActiveIndex","handleClick","titleIndex","Accordion","styled","Title","WebsiteForm","userId","newWebsite","handleCreateWebsite","ClientItem","client_items","returnClients","NotFound","Inline","primary","finally","hideProgressBar","path","component","TicketDashboard","ClientManager","Profile","LoginForm","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.9f3aa9ff.chunk.js","sourcesContent":["import axios, { AxiosError, AxiosResponse } from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\nimport Email from \"../models/email\";\r\nimport { Ticket } from \"../models/ticket\";\r\nimport { Transaction } from \"../models/transaction\";\r\nimport { Website } from \"../models/website\";\r\nimport { User, UserFormValues, UserSimple } from \"../models/user\";\r\nimport { store } from \"../stores/store\";\r\n\r\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\r\n\r\nconst responseBody = <T>(response: AxiosResponse<T>) => response.data;\r\n\r\naxios.interceptors.request.use((config) => {\r\n    const token = store.commonStore.token;\r\n    if (token) config.headers.Authorization = `Bearer ${token}`;\r\n\r\n    return config;\r\n}, (error:AxiosError) => {\r\n    const{data, status} = error.response!;\r\n\r\n    switch(status){\r\n        case 400:\r\n            if(data.errors){\r\n                const modalStateErrors = [];\r\n                for(const key in data.errors){\r\n                    if(data.errors[key]){\r\n                        modalStateErrors.push(data.errors[key]);\r\n                    }\r\n                }\r\n                throw modalStateErrors.flat();\r\n            }\r\n            else{\r\n                toast.error(data)\r\n            }\r\n            break;\r\n    }\r\n})\r\n\r\n\r\nconst requests ={\r\n    get:<T> (url: string) => axios.get<T>(url).then(responseBody),\r\n    post:<T> (url: string, body:{}) => axios.post<T>(url,body).then(responseBody),\r\n    put:<T> (url: string,body:{}) => axios.put<T>(url,body).then(responseBody),\r\n    del:<T> (url: string) => axios.delete<T>(url).then(responseBody)\r\n}\r\n\r\nconst Tickets ={\r\n    list: (params: URLSearchParams) => axios.get<Ticket[]>('/tickets',{params}).then(responseBody),\r\n    details: (id:string) => requests.get<Ticket>(`/tickets/${id}`),\r\n    update: (ticket: Ticket) => requests.put<void>(`/tickets/${ticket.id}`, ticket),\r\n    create: (ticket: Ticket) => requests.post<void>('/tickets', ticket),\r\n    delete: (id:string) => requests.del<void>(`/tickets/${id}`),\r\n    updateWatchers: (id: string) => axios.put<void>(`/tickets/${id}/watch`).then(responseBody)\r\n}\r\n\r\nconst Account = {\r\n    current: () => requests.get<User>('/account'),\r\n    currentRole: () => requests.get<string[]>('/account/role'),\r\n    getTransactions: (username:string) => requests.get<Transaction[]>(`/transaction/${username}`),\r\n    createWebsite: (website:Website)=> requests.post<Website>(\"/account/website\", website),\r\n    login: (user: UserFormValues) => requests.post<User>('/account/login',user),\r\n    register: (user: UserFormValues) => requests.post<User>('/account/register',user),\r\n    allClients: () => requests.get<UserSimple[]>('/account/allusers'),\r\n    deleteUser: (id:string) => requests.del<void>(`/account/${id}`)\r\n}\r\n\r\nconst Contact = {\r\n    send: (email: Email) => requests.post('/contact', email)\r\n}\r\n\r\nconst agent = {\r\n    Tickets,\r\n    Account,\r\n    Contact\r\n}\r\n\r\nexport default agent;","import { makeAutoObservable, reaction, runInAction} from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Profile } from \"../models/profile\";\r\nimport { Ticket } from \"../models/ticket\";\r\n\r\nexport default class TicketStore{\r\n    tickets: Ticket[] = [];\r\n    ticketRegistry = new Map<string, Ticket>();\r\n    predicate = new Map().set('all', true);\r\n\r\n    constructor(){\r\n        makeAutoObservable(this)\r\n\r\n        reaction(\r\n            () => this.predicate.keys(), //Do any of the predicate keys change? If so do something\r\n            () => {\r\n                this.ticketRegistry.clear();\r\n                this.loadTickets();\r\n            }\r\n        )\r\n    }\r\n\r\n    private setTickets = (tickets:Ticket[]) => {\r\n        //var new_tickets = [];\r\n        tickets.forEach((ticket)=>{\r\n            console.log(\"loading ticket:\", ticket.id);\r\n            ticket.date = ticket.date.split('T')[0];\r\n            this.ticketRegistry.set(ticket.id,ticket);\r\n            //new_tickets.push(ticket);\r\n        })\r\n    }\r\n\r\n    setPredicate = (predicate: string, value:string | Date) => {\r\n        const resetPredicate = () => {\r\n            this.predicate.forEach((value, key) => {\r\n                if(key !== 'startDate') this.predicate.delete(key);\r\n            })\r\n        }\r\n        switch(predicate){\r\n            case 'all':\r\n                resetPredicate();\r\n                this.predicate.set(\"all\", true);\r\n                break;\r\n            case \"isWatching\":\r\n                resetPredicate();\r\n                this.predicate.set(\"isWatching\", true);\r\n                break;\r\n            case \"isAssignedTo\":\r\n                resetPredicate();\r\n                this.predicate.set(\"isAssignedTo\", true);\r\n                break;\r\n            case \"isOwner\":\r\n                resetPredicate();\r\n                this.predicate.set(\"isOwner\", true);\r\n                break;\r\n            case \"startDate\":\r\n                resetPredicate();\r\n                this.predicate.set(\"startDate\",value);\r\n        }\r\n    }\r\n\r\n    get axiosParams() {\r\n        const params = new URLSearchParams();\r\n        this.predicate.forEach((value, key) => {\r\n            if(key === 'startDate'){\r\n                params.append(key, (value as Date).toISOString());\r\n            }else{\r\n                params.append(key,value);\r\n            }\r\n        })\r\n\r\n        return params;\r\n    }\r\n\r\n\r\n\r\n    loadTickets = async () =>{\r\n        try{\r\n           this.setTickets(await agent.Tickets.list(this.axiosParams));\r\n        }catch(error){\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n\r\n    createTicket = async (ticket:Ticket) =>{\r\n        try{\r\n            await agent.Tickets.create(ticket);\r\n            console.log(\"Ticket Created: \", ticket);\r\n            /*runInAction(()=>{\r\n                this.ticketRegistry.set(ticket.id, ticket);\r\n            })*/\r\n            this.loadTickets();\r\n        }catch(error){\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n\r\n    deleteTicket = async (id:string) =>{\r\n        try{\r\n            await agent.Tickets.delete(id);\r\n            runInAction(()=>{\r\n                this.ticketRegistry.delete(id);\r\n            });\r\n        }catch(error){\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    editTicket = async (ticket:Ticket, field:string, value:string) =>{\r\n        try{\r\n            runInAction(() =>{\r\n                ticket[field] = value;\r\n            })\r\n            await agent.Tickets.update(ticket);\r\n        }catch(error){\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    updateWatchers = async (ticketId:string, username:string) => {\r\n        try{\r\n            await agent.Tickets.updateWatchers(ticketId);\r\n\r\n            let ticket = this.ticketRegistry.get(ticketId);\r\n            console.log(ticketId);\r\n            //Update Registry with change\r\n            let result = ticket.users.findIndex(watcher => watcher.username === username);\r\n\r\n            runInAction(() => {\r\n                if(result >= 0){\r\n                    ticket.users[result].isWatching = !ticket.users[result].isWatching;\r\n                    this.ticketRegistry.set(ticketId, ticket);\r\n                }\r\n                else{\r\n                    let watcher : Profile = {\r\n                        username: username,\r\n                        isWatching: true,\r\n                        displayName: null,\r\n                        isAssignedTo: false,\r\n                        isOwner: false\r\n                    }\r\n                    ticket.users.push(watcher);\r\n                    this.ticketRegistry.set(ticketId, ticket);\r\n                }\r\n            })\r\n\r\n        }catch(error){\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n}","import { makeAutoObservable, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { User, UserFormValues, UserSimple } from \"../models/user\";\r\nimport { store } from \"./store\";\r\nimport {history} from \"../..\"\r\nimport { Transaction } from \"../models/transaction\";\r\nimport { Website } from \"../models/website\";\r\n\r\nexport default class UserStore{\r\n    user: User | null = null;\r\n    clientManager = new Map<string, UserSimple>();\r\n    transactionHistory:Transaction[] = [];\r\n\r\n    constructor(){\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    get isLoggedIn(){\r\n        return !!this.user;\r\n    }\r\n\r\n    login = async (creds: UserFormValues) => {\r\n        try{\r\n            const user = await agent.Account.login(creds);\r\n            store.commonStore.setToken(user.token);\r\n\r\n            runInAction(() => {\r\n                this.user = user;\r\n            })\r\n            history.push('/profile');\r\n            store.modalStore.closeModal();\r\n        }catch(error){\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    logout = () => {\r\n        store.commonStore.setToken(null);\r\n        window.localStorage.removeItem('jwt');\r\n        this.user = null;\r\n        history.push('');\r\n    }\r\n\r\n    register = async (newUser : UserFormValues) => {\r\n\r\n        await agent.Account.register(newUser);\r\n        this.getClients();\r\n        store.modalStore.closeModal();\r\n    }\r\n\r\n    getUser = async () => {\r\n        try{\r\n            const user = await agent.Account.current();\r\n            user.role = await agent.Account.currentRole();\r\n            runInAction(() => this.user = user);\r\n\r\n        }catch(error){\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    getClients = async () => {\r\n        try{\r\n            var clients = await agent.Account.allClients();\r\n            this.setClients(clients);\r\n\r\n        }catch(error){\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    setClients = async (clients:UserSimple[]) => {\r\n        clients.forEach(client =>{\r\n            this.clientManager.set(client.id, client);\r\n        });\r\n    }\r\n\r\n    setTransactions = async () => {\r\n        try{\r\n            if(this.user){\r\n                const transactionHistory = await agent.Account.getTransactions(this.user.username);\r\n                runInAction(() => this.transactionHistory = transactionHistory);\r\n            }\r\n        }\r\n        catch(error){\r\n            console.log(error);\r\n        }\r\n        \r\n    }\r\n\r\n    createWebsite = async (website:Website) => {\r\n        try{\r\n            console.log(\"Creating website: \",website);\r\n            await agent.Account.createWebsite(website);\r\n        }\r\n        catch(error){\r\n            console.log(error);\r\n        }\r\n    }\r\n    \r\n\r\n    deleteUser = async (id:string) => {\r\n        try{\r\n            await agent.Account.deleteUser(id);\r\n            console.log(\"user deleted!\");\r\n        }catch(error){\r\n            console.log(error);\r\n        }\r\n    }\r\n}","import { createContext, useContext } from \"react\";\r\nimport CommentStore from \"./commentStore\";\r\nimport CommonStore from \"./commonStore\";\r\nimport ContactStore from \"./contactStore\";\r\nimport ModalStore from \"./modalStore\";\r\nimport ProgressStore from \"./progressStore\";\r\nimport TicketStore from \"./ticketStore\";\r\nimport UserStore from \"./userStore\";\r\n\r\ninterface Store{\r\n    ticketStore: TicketStore;\r\n    userStore: UserStore;\r\n    commonStore: CommonStore;\r\n    modalStore: ModalStore;\r\n    contactStore: ContactStore;\r\n    commentStore: CommentStore;\r\n    progressStore: ProgressStore;\r\n}\r\n\r\n\r\nexport const store: Store = {\r\n    ticketStore: new TicketStore(),\r\n    userStore: new UserStore(),\r\n    commonStore: new CommonStore(),\r\n    modalStore: new ModalStore(),\r\n    contactStore: new ContactStore(),\r\n    commentStore: new CommentStore(),\r\n    progressStore: new ProgressStore()\r\n}\r\n\r\nexport const StoreContext = createContext(store);\r\n\r\nexport function useStore(){\r\n    return useContext(StoreContext);\r\n}","import { makeAutoObservable, reaction } from \"mobx\";\r\nimport { ServerError } from \"../models/serverError\";\r\n\r\n\r\nexport default class CommonStore{\r\n    error: ServerError | null = null;\r\n    token: string | null = window.localStorage.getItem('jwt');\r\n    appLoaded = false;\r\n    \r\n    constructor(){\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.token,\r\n            token => {\r\n                if(token) {\r\n                    window.localStorage.setItem('jwt', token);\r\n                }\r\n                else{\r\n                    window.localStorage.removeItem('jwt');\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    setServerError = (error: ServerError) => {\r\n        this.error = error;\r\n    }\r\n\r\n    setToken = (token: string|null) =>{\r\n        this.token = token;\r\n    }\r\n\r\n    setAppLoaded = () => {\r\n        this.appLoaded = true;\r\n    }\r\n}","import { makeAutoObservable } from \"mobx\"\r\n\r\ninterface Modal{\r\n    open: boolean;\r\n    body: JSX.Element | null;\r\n}\r\n\r\nexport default class ModalStore{\r\n    modal : Modal = {\r\n        open: false,\r\n        body: null\r\n    }\r\n\r\n    constructor(){\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    openModal = (content: JSX.Element) => {\r\n        this.modal.open = true;\r\n        this.modal.body = content;\r\n    }\r\n\r\n    closeModal = () => {\r\n        this.modal.open = false;\r\n        this.modal.body = null;\r\n    }\r\n}","import { makeAutoObservable } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport Email from \"../models/email\";\r\n\r\n\r\n\r\nexport default class ContactStore{\r\n\r\n    constructor(){\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n\r\n    sendContactEmail = (email:Email) => {\r\n        agent.Contact.send(email);\r\n        console.log('email sent!');\r\n    }\r\n}","import { HubConnection, HubConnectionBuilder, LogLevel } from \"@microsoft/signalr\";\r\nimport { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { CommentDto, CommentsDto, TicketComment } from \"../models/ticketcomment\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class CommentStore{\r\n    ticketComments = new Map<string,TicketComment[]>();\r\n    hubConnection: HubConnection | null = null;\r\n\r\n    constructor(){\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    createHubConnection = (ticketId: string) => {\r\n        this.hubConnection = new HubConnectionBuilder()\r\n            .withUrl(process.env.REACT_APP_CHAT_URL + '?ticketId='+ ticketId, {\r\n                accessTokenFactory: () => store.userStore.user?.token!\r\n            })\r\n            .withAutomaticReconnect()\r\n            .configureLogging(LogLevel.Information)\r\n            .build();\r\n        \r\n        this.hubConnection.start()\r\n        .catch(error => console.log('Error establishing connection: ', error));\r\n        \r\n        //Recieves Object {ticketId, comments:TicketComment[]}\r\n        this.hubConnection.on('LoadComments', (commentsDto:CommentsDto) => {\r\n            runInAction(() => {\r\n                commentsDto.comments.forEach(comment => {\r\n                    comment.createAt = new Date(comment.createAt + 'Z');\r\n                })\r\n                this.ticketComments.set(commentsDto.ticketId, commentsDto.comments);\r\n            });\r\n        });\r\n\r\n        this.hubConnection.on('ReceiveComment', (commentDto: CommentDto) => {\r\n            runInAction(() => {\r\n                var comment = commentDto.comment;\r\n                comment.createAt = new Date(comment.createAt);\r\n                var comments = this.ticketComments.get(commentDto.ticketId);\r\n                comments.push(comment);\r\n                console.log(\"Comment Store:\", comment);\r\n                this.ticketComments.set(commentDto.ticketId, comments);\r\n            });\r\n        })\r\n    }\r\n\r\n    stopHubConnection = () => {\r\n        this.hubConnection?.stop().catch(error => console.log('Error stopping connection: ', error));\r\n    }\r\n\r\n    clearComments = () => {\r\n        this.ticketComments.clear();\r\n        this.stopHubConnection();\r\n    }\r\n\r\n    addComment = async (values: any) => {\r\n        try{\r\n            await this.hubConnection?.invoke('SendComment',values);\r\n        }\r\n        catch(error){\r\n            console.log(error);\r\n        }\r\n    }\r\n}","import { HubConnection, HubConnectionBuilder, LogLevel } from \"@microsoft/signalr\";\r\nimport { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { ProgressNote, ProgressNoteDto, ProgressNotesDto } from \"../models/progressNote\";\r\nimport { store } from \"./store\";\r\n\r\n\r\n\r\nexport default class ProgressStore\r\n{\r\n    progressRegistry = new Map<string, ProgressNote[]>();//Key = Website ID\r\n    hubConnection: HubConnection | null = null;\r\n\r\n    constructor(){\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    createHubConnection = (websiteId:string) => {\r\n        this.hubConnection = new HubConnectionBuilder()\r\n            .withUrl(process.env.REACT_APP_PROGRESS_URL + '?websiteId='+ websiteId, {\r\n                accessTokenFactory: () => store.userStore.user?.token!\r\n            })\r\n            .withAutomaticReconnect()\r\n            .configureLogging(LogLevel.Information)\r\n            .build();\r\n        \r\n        this.hubConnection.start()\r\n        .catch(error => console.log('Error establishing connection: ', error));\r\n        \r\n        //Recieves Object {ticketId, comments:TicketComment[]}\r\n        this.hubConnection.on('LoadNotes', (noteDto:ProgressNotesDto) => {\r\n            runInAction(() => {\r\n                noteDto.notes.forEach(comment => {\r\n                    comment.createAt = new Date(comment.createAt + 'Z');\r\n                })\r\n                this.progressRegistry.set(noteDto.websiteId, noteDto.notes);\r\n            });\r\n        });\r\n\r\n        this.hubConnection.on('ReceiveNote', (noteDto: ProgressNoteDto) => {\r\n            runInAction(() => {\r\n                console.log(noteDto);\r\n                var note = noteDto.note;\r\n                note.createAt = new Date(note.createAt);\r\n                var notes = this.progressRegistry.get(noteDto.websiteId);\r\n                notes.push(note);\r\n                console.log(\"Progress Store:\", note);\r\n                this.progressRegistry.set(noteDto.websiteId, notes);\r\n            });\r\n        })\r\n\r\n    }\r\n\r\n\r\n    addNote = async (values: any) => {\r\n        try{\r\n            await this.hubConnection?.invoke('SendProgressNote',values);\r\n        }\r\n        catch(error){\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n}","import { Field, FieldProps, Form, Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport React, { useEffect} from \"react\";\r\nimport { Segment, Comment} from \"semantic-ui-react\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport * as Yup from 'yup';\r\nimport {formatDistanceToNow} from 'date-fns';\r\n\r\ninterface Props{\r\n    ticketId: string;\r\n}\r\n\r\nexport default observer(function TicketComments({ticketId}:Props)\r\n{\r\n    const {commentStore} = useStore();\r\n\r\n    useEffect(() =>{\r\n        if(ticketId){\r\n            commentStore.createHubConnection(ticketId);\r\n        }\r\n        return () => {\r\n            commentStore.clearComments();\r\n        }\r\n    }, [commentStore, ticketId]);\r\n\r\n    let getComments = () => {\r\n        var ticketComments = commentStore.ticketComments.get(ticketId);\r\n        var comments = [];\r\n\r\n        if (!ticketComments) return comments; \r\n\r\n        for(var comment of ticketComments){\r\n\r\n            comments.push(\r\n                    <Comment key={comment.id}>\r\n                        <Comment.Content>\r\n                            <Comment.Author as='a'>{comment.username}</Comment.Author>\r\n                            <Comment.Metadata>\r\n                                <div>{formatDistanceToNow(comment.createAt)} ago</div>\r\n                            </Comment.Metadata>\r\n                            <Comment.Text style={{whiteSpace:\"pre-wrap\"}}>{comment.body}</Comment.Text>\r\n                            <Comment.Actions>\r\n                                <Comment.Action>Reply</Comment.Action>\r\n                            </Comment.Actions>\r\n                        </Comment.Content>\r\n                    </Comment>\r\n                );\r\n        }\r\n        return comments;\r\n    }\r\n    return(\r\n        <Segment clearing>\r\n            <Comment.Group>\r\n                <Formik\r\n                    onSubmit={(values, {resetForm}) => \r\n                        commentStore.addComment(values).then(() => resetForm())}\r\n                    initialValues={{ticketId: ticketId, body:''}}\r\n                    validationSchema={Yup.object({\r\n                        body: Yup.string().required()\r\n                    })}    \r\n                >\r\n                    {({isValid, handleSubmit}) => (\r\n                        <Form className='ui form'>\r\n                            <Field name='body'>\r\n                                {(props: FieldProps) =>(\r\n                                    <div style={{position:'relative'}}>\r\n                                        <textarea\r\n                                            placeholder=\"Add comment (Enter to submit; SHIFT+Enter for new line)\"\r\n                                            rows={2}\r\n                                            {...props.field}\r\n                                            onKeyPress={e => {\r\n                                                if(e.key === 'Enter' && e.shiftKey){\r\n                                                    return;\r\n                                                }\r\n                                                if(e.key === 'Enter' && !e.shiftKey){\r\n                                                    e.preventDefault();\r\n                                                    isValid && handleSubmit();\r\n                                                }\r\n                                            }}\r\n                                        />\r\n                                    </div>\r\n                                )}\r\n                            </Field>\r\n                        </Form>\r\n                    )}\r\n                    \r\n                </Formik>\r\n                {getComments()}\r\n            </Comment.Group>\r\n        </Segment>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Button, Icon, Label } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\n\r\ninterface Props{\r\n    ticketId: string;\r\n}\r\n\r\nexport default observer(function WatchList({ticketId}: Props){\r\n    const {ticketStore, userStore} = useStore();\r\n    const {updateWatchers, ticketRegistry} = ticketStore;\r\n    const {user} = userStore;\r\n\r\n    let handleUpdateWatchers = () => {\r\n        //API Call\r\n        console.log(\"Updating Watchers\")\r\n        updateWatchers(ticketId, user.username);\r\n    }\r\n\r\n    return(\r\n        <>\r\n            {ticketRegistry.get(ticketId).users.map((watcher)=>\r\n            watcher.isWatching ? <Label key={ticketId + watcher.username} as='a' color=\"blue\">{watcher.username}</Label>\r\n            : null)}\r\n            <Button compact onClick={()=>{handleUpdateWatchers()}}>\r\n                <Icon fitted name='eye'></Icon>\r\n            </Button>\r\n        </>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React, { SyntheticEvent, useState } from \"react\";\r\nimport { Button, Divider, Dropdown, Item, Segment } from \"semantic-ui-react\";\r\nimport { Ticket } from \"../../../app/models/ticket\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport TicketComments from \"./TicketComments\";\r\nimport WatchList from \"./WatchList\";\r\n\r\n\r\ninterface Props{\r\n    ticket: Ticket;\r\n}\r\n\r\n\r\n\r\nexport default observer(function TicketItem({ticket}: Props)\r\n{\r\n    const{ticketStore} = useStore();\r\n    const{deleteTicket, editTicket} = ticketStore;\r\n\r\n    const priorityOptions = [\r\n        {\r\n          key: 'low',\r\n          text: 'Low',\r\n          value: 'low',\r\n          label: { color: 'green', empty: true, circular: true },\r\n        },   \r\n        {\r\n          key: 'medium',\r\n          text: 'Medium',\r\n          value: 'medium',\r\n          label: { color: 'yellow', empty: true, circular: true },\r\n        },   \r\n        {\r\n          key: 'high',\r\n          text: 'High',\r\n          value: 'high',\r\n          label: { color: 'red', empty: true, circular: true },\r\n        },\r\n    ]\r\n\r\n    const statusOptions = [\r\n        {\r\n          key: 'open',\r\n          text: 'Open',\r\n          value: 'open',\r\n          label: { color: 'green', empty: true, circular: true },\r\n        },   \r\n        {\r\n          key: 'blocked',\r\n          text: 'Blocked',\r\n          value: 'blocked',\r\n          label: { color: 'yellow', empty: true, circular: true },\r\n        },   \r\n        {\r\n          key: 'closed',\r\n          text: 'Closed',\r\n          value: 'closed',\r\n          label: { color: 'blue', empty: true, circular: true },\r\n        },\r\n    ]\r\n\r\n    const PriorityDropdown = () => (\r\n        <Dropdown\r\n            key={ticket.id+\"priority\"}\r\n            defaultValue={ticket.priority}\r\n            options={priorityOptions}\r\n            onChange={(e, data) => {handleChange('priority',data.value)}}\r\n        >\r\n        </Dropdown>\r\n      )\r\n    \r\n    const StatusDropdown = () => (\r\n    <Dropdown\r\n        key={ticket.id+\"status\"}\r\n        defaultValue={ticket.status}\r\n        options={statusOptions}\r\n        onChange={(e, data) => {handleChange('status',data.value)}}\r\n    >\r\n    </Dropdown>\r\n    )\r\n    const[showComments, setShowComments] = useState(false);\r\n\r\n    let handleChange = (field, value) => {\r\n        console.log(\"Updating Ticket\",ticket);\r\n        editTicket(ticket,field,value);\r\n    }\r\n\r\n    function handleTicketDelete(e:SyntheticEvent<HTMLButtonElement>, id:string){\r\n        deleteTicket(id);\r\n    }\r\n\r\n    let handleShowComments = () => {\r\n        setShowComments(prevVal => prevVal = !prevVal);\r\n    }\r\n    return(\r\n        \r\n        <Segment.Group>\r\n            \r\n            <Segment className=\"ticket-segment\">\r\n                <Item key={ticket.id}>\r\n                    <Item.Content className=\"ticket-item\" >\r\n                        <Item.Header className=\"ticket-header\">\r\n                            <span className=\"ticket-username\"><strong>Owner:</strong> {ticket.users[0].username}</span>\r\n                            <span className=\"ticket-status\"><strong>Status:</strong>{StatusDropdown()}</span>\r\n                            <span className=\"ticket-priority\">\r\n                                <strong>Priority:</strong>\r\n                                {PriorityDropdown()}\r\n                            </span>\r\n                            <span className=\"ticket-subject\">\r\n                                <strong>Subject:</strong> {ticket.subject}<br/>\r\n                                <strong>Date Created:</strong>{ticket.date}\r\n                            </span>\r\n                            <span><WatchList key={ticket.id+\"watch\"} ticketId={ticket.id}/></span>\r\n                        </Item.Header>\r\n                        <Item.Meta className='ticket-site'>\r\n                            <span><strong>Site: </strong>{ticket.site}</span>\r\n                        </Item.Meta>\r\n                        <Item.Description className=\"ticket-description\">\r\n                            <Divider horizontal>Description</Divider>\r\n                            <div className='ticket-text'>\r\n                                <p>{ticket.description}</p>\r\n                            </div>\r\n                        </Item.Description>\r\n                        {showComments ? <Button  color=\"blue\" onClick={()=> handleShowComments()}>Hide Comments</Button> \r\n                        : <Button positive onClick={()=> handleShowComments()} >Show Comments</Button>}\r\n\r\n                        <Button negative onClick={(e)=>{handleTicketDelete(e,ticket.id)}}>Delete</Button>\r\n                        <Button color='blue' floated='right'>Archive</Button>\r\n                    </Item.Content>\r\n                    {showComments ? <TicketComments ticketId={ticket.id}/> : null}\r\n                </Item>\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Header, Menu } from 'semantic-ui-react';\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\nexport default observer(function TicketFilter() {\r\n    const {ticketStore: {predicate, setPredicate}} = useStore();\r\n    return (\r\n        <>\r\n            <Menu vertical size='large' style={{ width: '100%', marginTop: 25 }}>\r\n                <Header icon='filter' attached color='teal' content='Filters' />\r\n                <Menu.Item \r\n                    content='All Tickets' \r\n                    active={predicate.has('all')}\r\n                    onClick={() => setPredicate('all', 'true')}\r\n                />\r\n                <Menu.Item \r\n                    content=\"I'm watching\" \r\n                    active={predicate.has('isWatching')}\r\n                    onClick={() => setPredicate('isWatching', 'true')}\r\n                />\r\n                <Menu.Item \r\n                    content=\"I'm Assigned To\" \r\n                    active={predicate.has('isAssignedTo')}\r\n                    onClick={() => setPredicate('isAssignedTo', 'true')}    \r\n                />\r\n                <Menu.Item \r\n                    content=\"I Created\" \r\n                    active={predicate.has('isOwner')}\r\n                    onClick={() => setPredicate('isOwner', 'true')}    \r\n                />\r\n            </Menu>\r\n            <Header />\r\n        </>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React, { Fragment, useEffect } from \"react\";\r\nimport { Grid, GridColumn} from \"semantic-ui-react\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport TicketItem from \"./TicketItem\";\r\nimport TicketFilter from \"./TicketFilter\";\r\n\r\n\r\nexport default observer(function TicketDashboard()\r\n{\r\n    const {ticketStore} = useStore();\r\n    const {ticketRegistry} = ticketStore;\r\n\r\n\r\n    useEffect(() => {\r\n        ticketStore.loadTickets();\r\n    },[ticketStore])\r\n\r\n    function returnTickets(){\r\n        var ticket_items = [];\r\n        for(var ticket of ticketRegistry.values()){\r\n            ticket_items.push(<TicketItem key={ticket.id} ticket={ticket}/>);\r\n        }\r\n        return ticket_items;\r\n    }\r\n\r\n    return(\r\n        <Fragment>\r\n            <title>MWS | Dashboard</title>\r\n            <div className='ticket-dashboard'>\r\n                <Grid>\r\n                    <GridColumn width='10'>\r\n                        {returnTickets()} \r\n                    </GridColumn>\r\n                    <GridColumn width='6'>\r\n                        <TicketFilter/>\r\n                    </GridColumn>\r\n                </Grid>\r\n            </div>\r\n        </Fragment>\r\n    )\r\n})","import {useField } from \"formik\";\r\nimport React from \"react\";\r\nimport { Form, Label } from \"semantic-ui-react\";\r\n\r\ninterface Props{\r\n    placeholder: string;\r\n    name: string;\r\n    type?: string;\r\n    label?: string;\r\n}\r\n\r\nexport default function MyTextInput(props: Props){\r\n    const [field, meta]= useField(props.name);\r\n\r\n    return(\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <input {...field} {...props}/>\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ):null}\r\n        </Form.Field>\r\n    )\r\n}","import { ErrorMessage, Form, Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Button, Label, Image } from \"semantic-ui-react\";\r\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\n\r\nexport default observer(function LoginForm(){\r\n    const {userStore} = useStore();\r\n    return(\r\n            <Formik\r\n                initialValues={{email:'', password:'', error:null}}\r\n                onSubmit={(values, {setErrors}) =>userStore.login(values).catch(error => \r\n                    setErrors({error: 'Invalid email or password'}))}\r\n            >\r\n                {({handleSubmit, isSubmitting, errors}) => (\r\n                    <Form className='ui form login-form' onSubmit={handleSubmit} autoComplete='off'>\r\n                        <Image className='login-img' src={'/assets/mws-logo-512.png'}  size={\"tiny\"}></Image>\r\n                        <MyTextInput name='email' placeholder='Email'/>\r\n                        <MyTextInput name='password' placeholder='Password' type='password'/>\r\n                        <ErrorMessage\r\n                            name='error' render={() => \r\n                            <Label style={{marginBottom:'10px'}} basic color='red' content={errors.error}></Label>}\r\n                        />\r\n                        <Button positive content='Login' type='submit' fluid/>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Link, NavLink } from \"react-router-dom\";\r\nimport { Button, Image, Menu } from \"semantic-ui-react\";\r\nimport LoginForm from \"../../features/users/LoginForm\";\r\nimport { useStore } from \"../stores/store\";\r\n\r\n\r\n\r\nexport default observer(function NavBar()\r\n{\r\n    const {userStore, modalStore} = useStore();\r\n\r\n    function displayProfile(){\r\n        if(userStore.isLoggedIn){\r\n            return(<Menu.Item as={NavLink} to='/profile'>Profile</Menu.Item>);\r\n        }\r\n    }\r\n    function displaySuperAdmin(){\r\n        if(userStore.isLoggedIn){\r\n            let roles = userStore.user.role;\r\n            if(roles.includes(\"SuperAdmin\")){\r\n                return(<>\r\n                    <Menu.Item as={NavLink} to='/tickets'>Ticket Dashboard</Menu.Item>\r\n                    <Menu.Item as={NavLink} to='/clientManager'>Client Manager</Menu.Item>\r\n                </>);\r\n            }\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div className='navbar-wrapper'>\r\n        <Menu  borderless fixed='top'>\r\n            <Menu.Item as={NavLink} to='/' exact>\r\n                <Image src={'/assets/mws-logo-512.png'} size={\"tiny\"}></Image>\r\n            </Menu.Item>\r\n            {/*<Menu.Item as={NavLink} to='/faq'>F.A.Q</Menu.Item>*/}\r\n            {/*<Menu.Item as={NavLink} to='/contact'>Contact</Menu.Item>*/}\r\n            <Menu.Item>Portfolio</Menu.Item>\r\n            {displayProfile()}\r\n            {displaySuperAdmin()}\r\n            {!userStore.isLoggedIn ? (\r\n            <Menu.Item position='right'>\r\n                <Button className='login-btn' onClick={() => modalStore.openModal(<LoginForm/>)} positive>Client Login</Button>\r\n            </Menu.Item>) : (\r\n             <Menu.Item position='right'>\r\n                 Welcome {userStore.user.username}!\r\n                <Button className='login-btn' onClick={() => userStore.logout()} as={Link} to='' negative>Logout</Button>\r\n             </Menu.Item>)\r\n            }\r\n           \r\n        </Menu>\r\n        </div>\r\n    )\r\n})","export default __webpack_public_path__ + \"static/media/OG_Cub3Ski_img.22aa0bd4.png\";","export default __webpack_public_path__ + \"static/media/CCSC_img.f95d3675.png\";","import {Card,Image} from \"semantic-ui-react\";\r\n\r\ninterface Props{\r\n    image:string;\r\n    href?:string;\r\n    width?:number;\r\n    height?:number;\r\n    header?:string;\r\n    description?:string;\r\n    placeholder?:string;\r\n}\r\n\r\nexport default function Slide(props:Props){\r\n    return(\r\n\r\n        <Card href={props.href} style={{width:\"300px\", height:\"350px\"}}>\r\n        <Image src={props.image}></Image>\r\n        <Card.Content>\r\n        <Card.Header>{props.header}</Card.Header>\r\n        <Card.Description>\r\n            Click to give it a try!\r\n        </Card.Description>\r\n        </Card.Content>\r\n        </Card>\r\n    )\r\n}","import React, {useEffect, useRef, useState, useReducer} from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Button, Header } from \"semantic-ui-react\";\r\nimport cub3ski_img from \"../assets/OG_Cub3Ski_img.png\";\r\nimport CCSC_img from \"../assets/CCSC_img.png\";\r\nimport Slide from \"./Slide\"\r\n\r\n//const colors=[\"#0088FE\", \"#00C49F\", \"#FFBB28\"];\r\nconst colors=[\"#FFBB28\"];\r\nconst _slides=[\r\n    {\r\n        image:cub3ski_img,\r\n        header:\"Game I created with React!\",\r\n        href:\"https://cub3ski.com\"\r\n    },\r\n    {\r\n        image:CCSC_img,\r\n        header:\"My first website with Wordpress!\",\r\n        href:\"https://crushcovidstreakchallenge.com/\"\r\n    }\r\n]\r\n\r\nconst translateFactor = (1/(_slides.length+2)*100);\r\nconst delay = 10000;\r\nlet slideKey = 0;\r\n\r\n\r\n\r\nfunction mod(n, m) {\r\n    return ((n % m) + m) % m;\r\n  }\r\n\r\nfunction createSlide(index){\r\n    const props = _slides[index];\r\n    slideKey++;\r\n    return(\r\n        <Slide key={`slide${slideKey}`} image={props.image} header={props.header} href={props.href}></Slide>\r\n    )\r\n\r\n}\r\n\r\nfunction portSlides(){\r\n    var slides =[];\r\n    for(var i=0; i<_slides.length;i++){\r\n        slides.push(createSlide(i));\r\n    }\r\n    \r\n    slides =[createSlide(_slides.length-1),...slides,createSlide(0)];\r\n    return(slides)\r\n}\r\n\r\nconst ACTIONS={\r\n    ADDSLIDELAST:'addslide-last',\r\n    DELSLIDESTART:'delslide-start',\r\n    ADDSLIDESTART: 'addslide-start',\r\n    DELSLIDELAST:'delslide-last'\r\n\r\n}\r\n\r\nfunction reducer(slides:any[], action){\r\n    switch(action.type){\r\n        case ACTIONS.ADDSLIDELAST:\r\n            action.ind = (action.ind + _slides.length+1) % _slides.length;\r\n            slides.push(createSlide(action.ind))\r\n            return(slides)\r\n        case ACTIONS.DELSLIDESTART:\r\n            slides.splice(0,1);\r\n            return(slides)\r\n        case ACTIONS.ADDSLIDESTART:\r\n            action.ind = mod(action.ind - 2, _slides.length);\r\n            slides = [createSlide(action.ind),...slides];\r\n            return(slides);\r\n        case ACTIONS.DELSLIDELAST:\r\n            slides.splice(slides.length - 1,1);\r\n            return(slides)\r\n    }\r\n\r\n}\r\n\r\nexport default function Portfolio(){\r\n    const [index, setIndex] = useState(0);\r\n    const [slides, dispatch] = useReducer(reducer,portSlides());\r\n    const [direction, setDirection] = useState(0);//1 = right,0 = return to neutral -1 = left\r\n    const [transitionEnabled, setTransitionEnabled] = useState(true);\r\n    const timeoutRef = useRef(null);\r\n\r\n    function resetTimeout() {\r\n\r\n        if (timeoutRef.current) {\r\n          clearTimeout(timeoutRef.current!);\r\n        }\r\n      }\r\n    \r\n    function handleTransitionEnd(){\r\n        if(direction === -1){//move to the right\r\n            dispatch({type:ACTIONS.ADDSLIDELAST, ind:index});\r\n            dispatch({type:ACTIONS.DELSLIDESTART});\r\n            setIndex((prevIndex) => prevIndex+1 > _slides.length - 1 ? 0 : prevIndex + 1);\r\n        }\r\n        else if(direction === 1){//move to the left\r\n            dispatch({type:ACTIONS.ADDSLIDESTART, ind:index});\r\n            dispatch({type:ACTIONS.DELSLIDELAST});\r\n            setIndex((prevIndex) => prevIndex-1 < 0 ? _slides.length - 1 : prevIndex - 1);  \r\n        }\r\n        setDirection((prevDir)=> \r\n        prevDir = 0);\r\n        setTransitionEnabled(false);\r\n    }\r\n\r\n    function resetTransition(){\r\n        setTransitionEnabled(true);\r\n    }\r\n\r\n    useEffect(()=>{\r\n        resetTimeout();\r\n\r\n        timeoutRef.current = setTimeout(() => \r\n            [resetTransition(),\r\n            setDirection((prevDir)=>\r\n            prevDir === 0 ? -1 : 0)],\r\n            delay\r\n        );\r\n                \r\n        \r\n        return () => {\r\n            resetTimeout();\r\n          };\r\n    },[direction]);\r\n\r\n    function left(){\r\n        setDirection((prevDirection) => prevDirection === -1 ? 0 : 1);\r\n        resetTransition();\r\n    }\r\n\r\n    function right(){\r\n        setDirection((prevDirection) => prevDirection === 1 ? 0 : -1);\r\n        resetTransition();\r\n    }\r\n\r\n    return(\r\n        <div data-testid=\"portfolio-1\" className='portfolio segment-div-white' style={{backgroundColor:'white'}}>\r\n            <Header as='h1' style={{color:'black'}}>Portfolio</Header>\r\n            <div className='port-slideshow'>\r\n                <div\r\n                    className=\"port-slideshowSlider\"\r\n                    style={{ transform: `translateX(${((direction*translateFactor)-20)}%)`,\r\n                    transition: !transitionEnabled ? 'none' : 'ease 2000ms'}}\r\n\r\n                    onTransitionEnd = {()=> handleTransitionEnd()}\r\n                >\r\n                    {slides}\r\n                </div>\r\n                <Button className=\"left-btn\" onClick={left} positive>Left</Button>\r\n                <Button className=\"right-btn\" onClick={right}positive>Right</Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n//ReactDOM.render(<Portfolio/>, document.getElementById(\"root\"));\r\n\r\n","import { useField } from \"formik\";\r\nimport React from \"react\";\r\nimport { Form } from \"semantic-ui-react\";\r\n\r\ninterface Props{\r\n    placeholder:string;\r\n    name:string;\r\n    type?:string;\r\n    label?:string;\r\n}\r\n\r\nexport default function MyTextArea(props:Props){\r\n    const[field] = useField(props.name);\r\n    return(\r\n        <Form.Field>\r\n            <label>{props.label}</label>\r\n            <textarea {...field} {...props}/>\r\n        </Form.Field>\r\n    )\r\n\r\n}","import {Form, Formik } from \"formik\";\r\nimport React from \"react\";\r\nimport {Button, Header, Segment} from \"semantic-ui-react\";\r\nimport MyTextArea from \"../../app/common/form/MyTextArea\";\r\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\n\r\nexport default function QuoteForm(){\r\n    const {contactStore} = useStore();\r\n\r\n    return(\r\n        <>\r\n            <Segment>\r\n                <Header as={'h1'} content='Contact Me!' className='black-header'/>\r\n                <Formik initialValues={{email:\"\", description:\"\", error:null}}\r\n                    onSubmit={(values) => contactStore.sendContactEmail({fromEmail:values.email, body:values.description})}>\r\n                    \r\n                    <Form className=\"ui form contact-form\">\r\n                        <MyTextInput name='first-name' placeholder='First Name'/>\r\n                        <MyTextInput name='last-name' placeholder='Last Name'/>\r\n                        <MyTextInput name='domain' placeholder='Your Website Domain'/>\r\n                        <MyTextInput name='email' placeholder='Email'/>\r\n                        <MyTextArea name=\"description\" placeholder=\"Description...\"/>\r\n                        <Button positive content=\"Send\" type=\"submit\"/>\r\n                    </Form>\r\n\r\n                    \r\n                </Formik>\r\n            </Segment>\r\n        </>\r\n    )\r\n}","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport website_img from \"../assets/website.jpg\";\r\nimport client_img from \"../assets/client.jpg\";\r\nimport QuoteForm from \"./QuoteForm\";\r\nimport { Header, Segment } from \"semantic-ui-react\";\r\n\r\n//const website_img1 = website_img;\r\nconst images = [website_img, client_img];\r\nconst delay = 5000;\r\n\r\nexport default function SlideShow() {\r\n  const [index, setIndex] = React.useState(0);\r\n  const timeoutRef = React.useRef(null);\r\n\r\n  function resetTimeout() {\r\n    if (timeoutRef.current) {\r\n      clearTimeout(timeoutRef.current!);\r\n    }\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    resetTimeout();\r\n    timeoutRef.current = setTimeout(\r\n      () =>\r\n        setIndex((prevIndex) =>\r\n          prevIndex === images.length - 1 ? 0 : prevIndex + 1\r\n        ),\r\n      delay\r\n    );\r\n\r\n    return () => {\r\n      resetTimeout();\r\n    };\r\n  }, [index]);\r\n\r\n  return (\r\n    <div className=\"slideshow\">\r\n      <div\r\n        className=\"slideshowSlider\"\r\n        style={{ transform: `translate3d(${-index * 100}%, 0, 0)` }}\r\n      >\r\n        {images.map((image, index) => (\r\n          <div\r\n            className=\"slide\"\r\n            key={index}\r\n            style={{backgroundImage:`url(${image})`,\r\n            backgroundSize:'cover',\r\n            backgroundRepeat:'no-repeat',\r\n            backgroundPosition:'50% 50%'\r\n            }}\r\n          ></div>\r\n        ))}\r\n      </div>\r\n      <div className='quoteform-div'>\r\n        <Segment className=\"welcome-flex\">\r\n          <div className=\"welcome-container\">\r\n            <Header as=\"h1\"  content=\"Welcome to Majeske Web Services!\"/>\r\n            <Header as=\"h2\" content=\"Manage your data with a personalized Web Interface\"/>\r\n          </div>\r\n          <div className=\"quoteForm\">\r\n            <QuoteForm/>\r\n          </div>\r\n        </Segment>\r\n      </div>\r\n\r\n      <div className=\"slideshowDots\">\r\n        {images.map((_, idx) => (\r\n          <div\r\n            key={idx}\r\n            className={`slideshowDot${index === idx ? \" active\" : \"\"}`}\r\n            onClick={() => {\r\n              setIndex(idx);\r\n            }}\r\n          ></div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}","export default __webpack_public_path__ + \"static/media/website.befe7c7c.jpg\";","export default __webpack_public_path__ + \"static/media/client.e89c0666.jpg\";","import React, { Fragment } from \"react\";\r\nimport { Header, Segment, Image,Grid } from \"semantic-ui-react\";\r\nimport Portfolio from \"./Portfolio\";\r\nimport SlideShow from \"./SlideShow\";\r\n\r\n\r\nexport default function HomePage(){\r\n    return(\r\n        <Fragment>\r\n            <title>MWS | Home</title>\r\n            <SlideShow/>\r\n            <div className=\"segment-div\">\r\n                <Header as=\"h1\">About Me!</Header>\r\n                <Grid stackable centered columns={2}>\r\n                    <Grid.Column>\r\n                        <Segment className=\"about-section\" raised style={{height:'100%'}}>\r\n                            <Header as=\"h1\" style={{color:\"black\"}}>My Goal</Header>\r\n                            <p className=\"my-goal-text\">\r\n                                Create fast and robust Single Page Applications <br/>\r\n                                supported by secure RESTful APIs <br/> \r\n                                that also meet high \r\n                                standards in areas of <br/>performance, design and ease of use. </p>\r\n                        </Segment>\r\n                    </Grid.Column>\r\n                    <Grid.Column>\r\n                            <Segment className=\"my-tools\" raised style={{height:'100%'}}>\r\n                                <Header as=\"h1\" style={{color:\"black\"}}>My Tools</Header>\r\n                                    <Grid centered columns={2}>\r\n                                        <Grid.Row>\r\n                                            <Grid.Column>\r\n                                                <Image rounded as=\"a\" \r\n                                                href=\"https://reactjs.org/\" \r\n                                                size=\"small\" \r\n                                                src=\"../logo512.png\"\r\n                                                ></Image>\r\n                                            </Grid.Column>\r\n                                            <Grid.Column >\r\n                                                <Image rounded as=\"a\" href=\"https://dotnet.microsoft.com/learn/dotnet/what-is-dotnet\" size=\"small\" src=\"../assets/NET_Core_Logo.png\"></Image>\r\n                                            </Grid.Column>\r\n                                        </Grid.Row>\r\n                                        <Grid.Row>\r\n                                            <Grid.Column >\r\n                                                <Image rounded as=\"a\" href=\"https://www.postgresql.org/\" size=\"small\" src=\"../assets/postgresql.png\"></Image>\r\n                                            </Grid.Column>\r\n                                            <Grid.Column>\r\n                                            \r\n                                                <Image rounded as=\"a\" href=\"https://www.heroku.com/about\" size=\"tiny\" src=\"../assets/heroku-logo.png\"></Image>\r\n                                            </Grid.Column>\r\n                                        </Grid.Row>\r\n                                    </Grid>\r\n                            </Segment>\r\n                    </Grid.Column>\r\n\r\n                </Grid>\r\n            </div>\r\n            <Portfolio/>\r\n        </Fragment>\r\n\r\n    )\r\n}","import React from \"react\";\r\nimport {Image} from \"semantic-ui-react\";\r\n\r\nexport default function Footer(){\r\n    return(\r\n        <footer>\r\n            <Image src={'/assets/mws-logo-512.png'} size='mini'/>\r\n            <p>Copyright 2021 MWS, All Rights Reserved</p>\r\n        </footer>\r\n\r\n    )\r\n}","import React from \"react\";\r\nimport { Table } from \"semantic-ui-react\";\r\nimport { Transaction } from \"../../app/models/transaction\";\r\n\r\ninterface Props{\r\n    transaction: Transaction;\r\n}\r\n\r\nexport default function TransactionItem({transaction}:Props){\r\n\r\n    return(\r\n        <Table.Row key={transaction.id}>\r\n            <Table.Cell>{transaction.amount}</Table.Cell>\r\n            <Table.Cell>{transaction.service}</Table.Cell>\r\n            <Table.Cell>{transaction.description}</Table.Cell>\r\n            <Table.Cell>{transaction.transactiontype}</Table.Cell>\r\n            <Table.Cell>{transaction.createTime}</Table.Cell>\r\n            <Table.Cell>{transaction.dueTime}</Table.Cell>\r\n        </Table.Row>\r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Header, Table } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport TransactionItem from \"./TransactionItem\";\r\n\r\n\r\nexport default observer(function TransactionHistory()\r\n{\r\n    const {userStore} = useStore();\r\n    const {transactionHistory,user} = userStore;\r\n    const [total, setTotal] = useState(0);\r\n\r\n    useEffect(()=>{\r\n        if(user == null){\r\n            userStore.getUser();\r\n        }\r\n        userStore.setTransactions();\r\n    },[user,total, userStore])\r\n\r\n    let transactionItems = () => {\r\n        let transactionItems = [];\r\n        let total_amount = 0;\r\n\r\n        if(transactionHistory.length === 0)\r\n        {\r\n            transactionItems.push((<Table.Row key='no-transactions'></Table.Row>));\r\n            return transactionItems;\r\n        }\r\n\r\n        transactionHistory.forEach((transaction) => {\r\n            total_amount += transaction.amount;\r\n            transactionItems.push((<TransactionItem transaction={transaction}/>));\r\n        })\r\n        if(total === 0){\r\n            setTotal(prevTotal => prevTotal + total_amount);\r\n        }\r\n        \r\n        return transactionItems;\r\n    }\r\n    return(\r\n        <>\r\n        <Header as='h1' style={{color:'black'}}>{\"$\" + total}</Header>\r\n        <Table>\r\n            <Table.Header>\r\n                <Table.Row>\r\n                    <Table.HeaderCell>Amount</Table.HeaderCell>\r\n                    <Table.HeaderCell>Service</Table.HeaderCell>\r\n                    <Table.HeaderCell>Description</Table.HeaderCell>\r\n                    <Table.HeaderCell>Type</Table.HeaderCell>\r\n                    <Table.HeaderCell>Sent Date</Table.HeaderCell>\r\n                    <Table.HeaderCell>Due By</Table.HeaderCell>\r\n                </Table.Row>\r\n            </Table.Header>\r\n            <Table.Body>\r\n                {transactionItems()}\r\n            </Table.Body>\r\n        </Table>\r\n        </>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React, { useEffect } from \"react\";\r\nimport { Header, Segment, Tab } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport TicketItem from \"../tickets/dashboard/TicketItem\";\r\n\r\n\r\nexport default observer(function ProgressFeed()\r\n{\r\n  const {ticketStore, userStore} = useStore();\r\n  const {ticketRegistry} = ticketStore;\r\n  const {user} = userStore;\r\n\r\n\r\n  let filterTickets = () => {\r\n    var ticket_items = [];\r\n    if(user == null) return ticket_items;\r\n    for(var ticket of ticketRegistry.values()){\r\n      console.log(ticket.users);\r\n      if(ticket.users.find(u=> u.username === user.username) !== undefined){\r\n        console.log(\"Ticket:\", ticket);\r\n        ticket_items.push(<TicketItem key={ticket.id} ticket={ticket}/>);\r\n      }\r\n    }\r\n    return ticket_items;\r\n  }\r\n\r\n    return(\r\n        <Segment>\r\n            <Header as='h1' className=\"black-header\">Progress Tracker</Header>\r\n            {filterTickets()}\r\n        </Segment>\r\n    )\r\n\r\n})","import { Field, Form, Formik } from \"formik\";\r\nimport React from \"react\";\r\nimport { Button, Header } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport {v4 as uuid} from \"uuid\";\r\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\r\n\r\n\r\ninterface Props{\r\n    url: string;\r\n}\r\n\r\nexport default function TicketForm({url}:Props){\r\n    const {ticketStore} = useStore();\r\n    const {createTicket} = ticketStore;\r\n    \r\n    function ticketSubmit(ticket){\r\n        const newTicket ={\r\n            ...ticket,\r\n            id:uuid(),\r\n    };\r\n        createTicket(newTicket);\r\n    }\r\n    let curDate = new Date();\r\n    return(\r\n        <Formik \r\n            initialValues = {{\r\n                id: '',\r\n                date: curDate.toISOString(),\r\n                username: '',\r\n                site: url,\r\n                subject: '',\r\n                description: '',\r\n                priority:'low',\r\n                status:'open'\r\n            }} \r\n            onSubmit={values => ticketSubmit(values)}>\r\n            {({handleSubmit}) => (\r\n            <Form className=\"ui form\" onSubmit={handleSubmit}  autoComplete='off'>\r\n                <Header as='h1' style={{color:'black'}}>Create Ticket</Header>\r\n                <MyTextInput placeholder='Subject' name='subject'/>\r\n                <MyTextInput placeholder='Description' name='description'/>\r\n                <Field as=\"select\" name='priority'>\r\n                    <option value=\"low\">Low</option>\r\n                    <option value=\"med\">Medium</option>\r\n                    <option value=\"high\">High</option>\r\n                </Field>\r\n                <Field as=\"select\" name='status'>\r\n                    <option value=\"open\">Open</option>\r\n                    <option value=\"closed\">Closed</option>\r\n                    <option value=\"blocked\">Blocked</option>\r\n                </Field>\r\n                <Button positive type='submit'>Submit</Button>\r\n            </Form>)}\r\n        </Formik>\r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport {Comment} from \"semantic-ui-react\";\r\nimport {formatDistanceToNow} from 'date-fns';\r\n\r\ninterface Props {\r\n    websiteId: string;\r\n}\r\n\r\n\r\nexport default observer(function ProgressNoteItem({websiteId}: Props)\r\n{\r\n    const {progressStore} = useStore();\r\n\r\n    let getNotes = () => {\r\n        var notes = progressStore.progressRegistry.get(websiteId);\r\n        var progressNotes = [];\r\n\r\n        if (!notes) return progressNotes; \r\n\r\n        for(var note of notes){\r\n            \r\n\r\n            progressNotes.push(\r\n                    <Comment key={note.id}>\r\n                        <Comment.Content>\r\n                            <Comment.Author as='a'>{note.author}</Comment.Author>\r\n                            <Comment.Metadata>\r\n                                <div>{formatDistanceToNow(note.createAt)} ago</div>\r\n                                <div>+{note.progressAmount}%</div>\r\n                            </Comment.Metadata>\r\n                            <Comment.Text style={{whiteSpace:\"pre-wrap\"}}>{note.body}</Comment.Text>\r\n                        </Comment.Content>\r\n                    </Comment>\r\n                );\r\n        }\r\n        return progressNotes;\r\n    }\r\n    return(<>{getNotes()}</>)\r\n})","import { Field, FieldProps, Form, Formik } from \"formik\";\r\nimport React, { useEffect } from \"react\";\r\nimport { Header } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport * as Yup from 'yup';\r\nimport { observer } from \"mobx-react-lite\";\r\n\r\ninterface Props {\r\n    websiteId: string\r\n}\r\n\r\nexport default observer(function ProgressNotes({websiteId} : Props)\r\n{\r\n    const {progressStore} = useStore();\r\n\r\n    useEffect(() => {\r\n        progressStore.createHubConnection(websiteId);\r\n    }, [progressStore, websiteId])\r\n\r\n    return(\r\n\r\n        <>\r\n            <Formik\r\n                onSubmit={(values, {resetForm}) => \r\n                    progressStore.addNote(values).then(() => resetForm())}\r\n                initialValues={{websiteId: websiteId, body:'', progressAmount:0}}\r\n                validationSchema={Yup.object({\r\n                    progressAmount: Yup.number().required(),\r\n                    body: Yup.string().required()\r\n                })}    \r\n            >\r\n                {({isValid, handleSubmit}) => (\r\n                    <Form className='ui form'>\r\n                        <Header as=\"h3\" content=\"Progress Amount\" className=\"black-header\"></Header>\r\n                        <Field type=\"number\" name=\"progressAmount\"></Field>\r\n                        <Header as=\"h3\" content=\"Note\" className=\"black-header\"></Header>\r\n                        <Field name='body'>\r\n                            {(props: FieldProps) =>(\r\n                                <div style={{position:'relative'}}>\r\n                                    <textarea\r\n                                        placeholder=\"Add Progress Note (Enter to submit; SHIFT+Enter for new line)\"\r\n                                        rows={2}\r\n                                        {...props.field}\r\n                                        onKeyPress={e => {\r\n                                            if(e.key === 'Enter' && e.shiftKey){\r\n                                                return;\r\n                                            }\r\n                                            if(e.key === 'Enter' && !e.shiftKey){\r\n                                                e.preventDefault();\r\n                                                isValid && handleSubmit();\r\n                                            }\r\n                                        }}\r\n                                    />\r\n                                </div>\r\n                            )}\r\n                        </Field>\r\n                    </Form>\r\n                )}\r\n                \r\n            </Formik>\r\n\r\n        </>\r\n\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Button, Header, Progress, Segment, Comment } from \"semantic-ui-react\";\r\nimport { Website } from \"../../app/models/website\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport TicketForm from \"../tickets/TicketForm\";\r\nimport ProgressNoteItem from \"./ProgressNoteItem\";\r\nimport ProgressNotes from \"./ProgressNotes\";\r\n\r\n\r\ninterface Props{\r\n    website: Website\r\n}\r\n\r\nexport default observer(function WebsiteItem({website}:Props){\r\n    const {modalStore, progressStore} = useStore();\r\n    const[showNotes, setShowNotes] = useState(false);\r\n    const{progressRegistry} = progressStore;\r\n\r\n    return(\r\n        <Segment>\r\n            <Header as=\"h3\" style={{color:\"black\"}}>{website.url}</Header>\r\n            <Progress percent={website.progress} progress color=\"green\"/>\r\n            {showNotes ? <Button color=\"blue\" onClick={()=>setShowNotes(prevVal=> prevVal = !prevVal)}>Hide Progress</Button>\r\n            : <Button positive onClick={()=>setShowNotes(prevVal=> prevVal = !prevVal)}>View Progress</Button>}\r\n            <Button color='blue' onClick={() => modalStore.openModal(<TicketForm url={website.url}/>)} floated='right'>Create Ticket</Button>\r\n\r\n            {showNotes ? <>\r\n                <ProgressNotes websiteId={website.id}/>\r\n                <Comment.Group>\r\n                    <ProgressNoteItem websiteId={website.id}/>\r\n                </Comment.Group> </>\r\n                : null\r\n            }  \r\n        </Segment>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React, { useEffect } from \"react\";\r\nimport { Button, Grid, Header, Segment } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport TransactionHistory from \"../payments/TransactionHistory\";\r\nimport ProgressFeed from \"./ProgressFeed\";\r\nimport WebsiteItem from \"./WebsiteItem\";\r\n\r\n\r\n\r\nexport default observer(function Profile(){\r\n    const {userStore, ticketStore} = useStore();\r\n    const {user} = userStore;\r\n    const {ticketRegistry} = ticketStore;\r\n\r\n    useEffect(() => {\r\n        if(user == null){\r\n            userStore.getUser();\r\n        }\r\n        //Get tickets for currently logged in user\r\n        ticketStore.loadTickets();\r\n    },[user, userStore, ticketStore,ticketRegistry]);\r\n\r\n    function displayWebsites(){\r\n        var websites:JSX.Element[] = [];\r\n        if(user=== null || user.websites === null || user.websites.length === 0){   \r\n            websites.push(<Segment placeholder>\r\n                <Header className=\"black-header\">No Websites Found</Header>\r\n            </Segment>);\r\n            return websites;\r\n        }\r\n        user.websites.forEach(site => websites.push(<WebsiteItem key={site.id} website={site}></WebsiteItem>));\r\n\r\n        return websites;\r\n    }\r\n    return(\r\n        <Segment className='content-container'>\r\n            <title>MWS | My Profile</title>\r\n            <Header className=\"profile-header\" as='h1' style={{color:'black'}}>My Profile</Header>\r\n            \r\n            <Grid>\r\n                <Grid.Column width='8'>\r\n                    <Segment raised>\r\n                        <Header as='h1' style={{color:'black'}}>Current Balance</Header>\r\n                        <TransactionHistory/>\r\n                        <Button positive>Pay Balance</Button>\r\n                        <Button floated='right' color='blue'>View History</Button>\r\n                    </Segment>\r\n                </Grid.Column>\r\n                <Grid.Column width='8'>\r\n                    <Segment raised>\r\n                        <Header as='h1' style={{color:'black'}}>My Websites</Header>\r\n                        <Segment.Group>\r\n                            {displayWebsites()}\r\n                        </Segment.Group>\r\n                    </Segment>\r\n\r\n                </Grid.Column>\r\n            </Grid>\r\n            <ProgressFeed/>\r\n\r\n        </Segment>\r\n        \r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Modal } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../stores/store\";\r\n\r\n\r\nexport default observer(function ModalContainer(){\r\n    const {modalStore} = useStore();\r\n    return(\r\n        <Modal open = {modalStore.modal.open} onClose={modalStore.closeModal} size='mini'>\r\n            <Modal.Content>\r\n                {modalStore.modal.body}\r\n            </Modal.Content>\r\n        </Modal>\r\n    )\r\n})","import React, { useState } from \"react\";\r\nimport { Accordion,Header,Icon, Segment } from \"semantic-ui-react\";\r\n\r\nexport default function FAQ(){\r\n    const [activeIndex, setActiveIndex] = useState(-1);\r\n    \r\n    const handleClick = (e,titleIndex) =>{\r\n        const {index} = titleIndex;\r\n        const newIndex = activeIndex === index ? -1 : index;\r\n        setActiveIndex(newIndex);\r\n    }\r\n\r\n    return(\r\n        <Segment className='ui segment content-container'>\r\n            <title>MWS | FAQ</title>\r\n            <Header as='h1' className='black-header'>F.A.Q</Header>\r\n            <Accordion styled className='faq-accordion'>\r\n                <Accordion.Title index={0} onClick={handleClick}>\r\n                    <Icon name=\"dropdown\"/>\r\n                    FAQ #1\r\n                </Accordion.Title>\r\n                <Accordion.Content active={activeIndex === 0}>\r\n                    <p>Answer #1</p>\r\n                </Accordion.Content>\r\n                <Accordion.Title index={1} onClick={handleClick}>\r\n                    <Icon name=\"dropdown\"/>\r\n                    FAQ #2\r\n                </Accordion.Title>\r\n                <Accordion.Content active={activeIndex === 1}>\r\n                    <p>Answer #2</p>\r\n                </Accordion.Content>\r\n            </Accordion>\r\n        </Segment>\r\n\r\n\r\n    )\r\n}","import React from \"react\";\r\nimport { Container, Grid, Header, Segment} from \"semantic-ui-react\";\r\nimport QuoteForm from \"../home/QuoteForm\";\r\n\r\nexport default function Contact(){\r\n    \r\n    return(\r\n            <>\r\n                <Segment raised className='contact-form-container'>\r\n                    <title>MWS | Contact</title>\r\n                    <Grid>\r\n                    <Grid.Column width='8'>\r\n                        <Segment className=\"contact-info\">\r\n                            <Header as=\"h1\" content=\"Hire Me \"></Header>\r\n                        </Segment>\r\n\r\n                    </Grid.Column>\r\n                        <Grid.Column width='8'>\r\n                            <QuoteForm/>\r\n                        </Grid.Column>\r\n                    </Grid>\r\n                </Segment>\r\n            </>\r\n    )\r\n}","import { Form, Formik } from \"formik\";\r\nimport React from \"react\";\r\nimport { Button, Header } from \"semantic-ui-react\";\r\nimport MyTextInput from \"../../../app/common/form/MyTextInput\";\r\nimport { UserSimple } from \"../../../app/models/user\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport {v4 as uuid} from \"uuid\";\r\n\r\ninterface Props{\r\n    user:UserSimple;\r\n}\r\n\r\nexport default function WebsiteForm({user}:Props)\r\n{\r\n    const {userStore} = useStore();\r\n    const {createWebsite} = userStore;\r\n\r\n    let handleCreateWebsite = (website) => {\r\n        const newWebsite={\r\n            ...website,\r\n            id:uuid()\r\n        }\r\n        createWebsite(newWebsite);\r\n    }\r\n    return(\r\n        <Formik \r\n            initialValues = {{\r\n                id: '',\r\n                progress:0,\r\n                userId:user.id,\r\n                url:'',\r\n            }} \r\n            onSubmit={values => handleCreateWebsite(values)}>\r\n            {({handleSubmit}) => (\r\n            <Form className=\"ui form\" onSubmit={handleSubmit}  autoComplete='off'>\r\n                <Header as='h1' style={{color:'black'}}>Create Website Instance</Header>\r\n                <MyTextInput placeholder='Any Progress?' name='progress'/>\r\n                <MyTextInput placeholder='URL' name='url'/>\r\n                <Button positive type='submit'>Submit</Button>\r\n            </Form>)}\r\n        </Formik>\r\n    )\r\n}","import React, { SyntheticEvent } from \"react\";\r\nimport { Button, Segment } from \"semantic-ui-react\";\r\nimport { UserSimple } from \"../../../app/models/user\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport WebsiteForm from \"./WebsiteForm\";\r\n\r\ninterface Props{\r\n    client: UserSimple\r\n}\r\n\r\nexport default function ClientItem({client}:Props){\r\n    const {userStore, modalStore} = useStore();\r\n    const {clientManager} = userStore;\r\n\r\n    function deleteUser(e:SyntheticEvent<HTMLButtonElement>, id:string){\r\n        userStore.deleteUser(id);\r\n        clientManager.delete(id);\r\n    }\r\n\r\n    return(\r\n        <Segment clearing className='clientManager'>\r\n            <p>\r\n                <strong>Username:</strong> {client.username}\r\n                <strong> Role:</strong> {client.role}\r\n            </p>\r\n            <Button onClick={(e) => deleteUser(e,client.id)} negative floated='right'>Remove User</Button>\r\n            <Button positive floated='right' onClick={() => modalStore.openModal(<WebsiteForm user={client}/>)}>Create Website</Button>\r\n        </Segment>\r\n    )\r\n}","\r\nimport { Form, Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport React, { useEffect } from \"react\";\r\nimport { Button, Header, Segment } from \"semantic-ui-react\";\r\nimport MyTextInput from \"../../../app/common/form/MyTextInput\";\r\nimport { UserFormValues } from \"../../../app/models/user\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport ClientItem from \"./ClientItem\";\r\n\r\n\r\nexport default observer(function ClientManager(){\r\n    const {userStore, modalStore} = useStore();\r\n    const {clientManager,register} = userStore;\r\n    const {openModal} = modalStore;\r\n\r\n    useEffect(() => {\r\n        userStore.getClients()\r\n    },[userStore,clientManager]);\r\n\r\n    function returnClients(){\r\n        var client_items = [];\r\n        for(var client of clientManager.values()){\r\n            if(!client.role.includes(\"SuperAdmin\")){\r\n                client_items.push(<ClientItem key={client.id} client={client}/>);\r\n            }\r\n\r\n        }\r\n        return client_items;\r\n    }\r\n\r\n    let registerUserForm = () => {\r\n        return(\r\n            <Formik\r\n                initialValues={{email:\"\", username:\"\", password:\"\"}}\r\n                onSubmit={(values:UserFormValues)=> {register(values)}}\r\n            > \r\n                {({handleSubmit}) => (<Form className=\"ui form\" onSubmit={handleSubmit} autoComplete=\"off\">\r\n                    <Header className=\"black-header\" as=\"h1\" content=\"Register User\"></Header>\r\n                    <MyTextInput name='email' placeholder='Email'/>\r\n                    <MyTextInput name='username' placeholder='Username'/>\r\n                    <MyTextInput type=\"password\" name='password' placeholder='Password'/>\r\n                    <Button positive content=\"Send\" type=\"submit\"/>\r\n                </Form>)}\r\n            </Formik>\r\n        )\r\n    }\r\n\r\n    return(\r\n        <Segment>\r\n            <title>MWS | Client Dashboard</title>\r\n            <Button positive content=\"+ Create User\" onClick={()=> openModal(registerUserForm())}/>\r\n            {returnClients()}\r\n        </Segment>\r\n    )\r\n\r\n})","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Header, Icon, Segment } from \"semantic-ui-react\";\r\n\r\n\r\nexport default function NotFound(){\r\n    return(\r\n        <Segment placeholder>\r\n            <Header icon style={{color:\"black\"}}>\r\n                <Icon name='search'/>\r\n                Oops - we've looked everywhere and could not find this page.\r\n            </Header>\r\n            <Segment.Inline>\r\n                <Button as={Link} to=\"/\" primary>\r\n                    Return to Home Page\r\n                </Button>\r\n            </Segment.Inline>\r\n        </Segment>\r\n    )\r\n}","import React, { Fragment, useEffect } from 'react';\r\nimport './App.css';\r\nimport TicketDashboard from '../../features/tickets/dashboard/TicketDashboard';\r\nimport NavBar from './NavBar';\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport HomePage from '../../features/home/HomePage';\r\nimport Footer from './Footer';\r\nimport Profile from '../../features/users/Profile';\r\nimport LoginForm from '../../features/users/LoginForm';\r\nimport { useStore } from '../stores/store';\r\nimport { observer } from 'mobx-react-lite';\r\nimport ModalContainer from '../common/modals/ModalContainer';\r\nimport FAQ from '../../features/pages/FAQ';\r\nimport Contact from '../../features/pages/Contact';\r\nimport ClientManager from '../../features/users/clientManager/ClientManager';\r\nimport { ToastContainer } from 'react-toastify';\r\nimport NotFound from '../../features/errors/NotFound';\r\n\r\n\r\n\r\nfunction App() {\r\n  const {commonStore, userStore} = useStore();\r\n\r\n  useEffect(() =>{\r\n    if (commonStore.token){\r\n      userStore.getUser().finally(() => commonStore.setAppLoaded());\r\n    }\r\n    else{\r\n      commonStore.setAppLoaded();\r\n    }\r\n  }, [commonStore, userStore])\r\n\r\n  return (\r\n    <Fragment>\r\n      <ModalContainer/>\r\n      <ToastContainer position='bottom-right' hideProgressBar/>\r\n        <NavBar/>\r\n        <div id='page-container'>\r\n          <div id='content-wrapper'>\r\n              <Switch>\r\n                <Route exact path='/' component={HomePage}></Route>\r\n                <Route path='/faq' component={FAQ}></Route>\r\n                <Route path='/tickets' component={TicketDashboard}></Route>\r\n                <Route path='/clientManager' component={ClientManager}></Route>\r\n                <Route path='/contact' component={Contact}></Route>\r\n                <Route path='/profile' component={Profile}></Route>\r\n                <Route path='/login' component={LoginForm}></Route>\r\n                <Route component={NotFound}></Route>\r\n              </Switch>\r\n            </div>\r\n            <div>\r\n            <Footer/>\r\n            </div>\r\n        </div>\r\n\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default observer(App);\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport 'react-toastify/dist/ReactToastify.min.css'\r\nimport './index.css';\r\nimport App from './app/layout/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { store, StoreContext } from './app/stores/store';\r\nimport { Router } from 'react-router-dom';\r\nimport {createBrowserHistory} from \"history\";\r\n\r\nexport const history = createBrowserHistory();\r\n\r\nReactDOM.render(\r\n  <StoreContext.Provider value={store}>\r\n    <Router history={history}>\r\n      <App />\r\n    </Router>\r\n  </StoreContext.Provider>\r\n    ,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}